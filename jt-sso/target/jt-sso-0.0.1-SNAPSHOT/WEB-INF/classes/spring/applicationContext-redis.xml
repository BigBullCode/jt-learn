<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	
	<!--每次都创建jedis对象性能较低 创建jedis线程池  -->
	<!-- <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		定义连接总数 
		<property name="maxTotal" value="${redis.maxTotal}"/>
		定义最大闲置资源 
		<property name="maxIdle" value="${redis.maxIdle}"/>
		定义是否自动连接测试 测试当前连接是否可用,如果有问题,则获取新的连接
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
	</bean> -->
	<!--定义jedis工厂模式  通过连接工厂可以直接连接redis-->
	<!-- <bean id="jedisConnectionFactory" 
	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
		定义远程主机 
		<property name="hostName" value="${redis.host}"/>
		定义端口号
		<property name="port" value="${redis.port1}"/>
		引入配置文件 
		<property name="poolConfig" ref="poolConfig"/>
	</bean> -->
	
	<!--定义redisTemplate方便操作redis  -->
	<!-- <bean id="stringRedisTemplate" 
	class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"/>
	</bean> -->
	
	<!--配置jedis -->
	<!-- <bean id="jedis" class="redis.clients.jedis.Jedis">
		<constructor-arg index="0" value="${redis.host}" type="java.lang.String"/>
		<constructor-arg index="1" value="${redis.port}" type="int"/>
	</bean> -->
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- 配置redis分片 -->
	<!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		调用set注入方式
		<property name="maxTotal" value="${redis.maxTotal}"></property>
		<property name="maxIdle" value="${redis.maxIdle}"></property>
	</bean> -->
	<!-- 定义redis分片节点信息 -->
	<!-- <bean id="info1" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port1}"></constructor-arg>
	</bean>
	<bean id="info2" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port2}"></constructor-arg>
	</bean>
	<bean id="info3" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port3}"></constructor-arg>
	</bean> -->

	<!-- 创建分片的连接池对象 -->
	<!-- <bean id="jedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
		<constructor-arg name="shards">
			<list>
				<ref bean="info1"/>
				<ref bean="info2"/>
				<ref bean="info3"/>
			</list>
		</constructor-arg>
	</bean> -->
	
	
	<!-- 哨兵池 -->
	<!-- <bean id="sentinelPool" class="redis.clients.jedis.JedisSentinelPool">
		<constructor-arg name="masterName" value="${redis.sentinel.mastername}"/>
		<constructor-arg name="sentinels">
			<set>
				<value>${redis.sentinel.a}</value>
				<value>${redis.sentinel.b}</value>
				<value>${redis.sentinel.c}</value>
			</set>
		</constructor-arg>
	</bean> -->
	
	
	
	
	
	
	
	
	<!-- jedis 配置-->  
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >  
        <!--最大空闲数-->  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <!--最大建立连接等待时间-->  
        <property name="maxWaitMillis" value="${redis.maxWait}" />  
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="minIdle" value="${redis.minIdle}" />  
    </bean>
    
     <bean id="jedisCluster"  class="com.jt.common.factory.JedisClusterFactory" >  
        <property name="propertySource">
            <value>classpath:/property/redis.properties</value>  
        </property>  
        <property name="redisNodePrefix" value="redis.cluster" />      
        <property name="poolConfig" ref="poolConfig" />  
    </bean> 
    
	
	
	
	
	
	
	
	
	
	
	
</beans>